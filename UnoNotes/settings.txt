VS Code Configuration
In your project, go to the debugger and hit the little gear icon and choose PHP. A new launch configuration will be created for you with two configurations:

Listen for Xdebug This setting will simply start listening on the specified port (by default 9000) for XDebug. If you configured XDebug like recommended above, everytime you make a request with a browser to your webserver or launch a CLI script Xdebug will connect and you can stop on breakpoints, exceptions etc.
Launch currently open script This setting is an example of CLI debugging. It will launch the currently opened script as a CLI, show all stdout/stderr output in the debug console and end the debug session once the script exits.
Supported launch.json settings:
request: Always "launch"
hostname: The address to bind to when listening for XDebug (default: all IPv6 connections if available, else all IPv4 connections)
port: The port on which to listen for Xdebug (default: 9000)
stopOnEntry: Whether to break at the beginning of the script (default: false)
pathMappings: A list of server paths mapping to the local source paths on your machine, see "Remote Host Debugging" below
log: Whether to log all communication between VS Code and the adapter to the debug console. See Troubleshooting further down.
ignore: An optional array of glob patterns that errors should be ignored from (for example **/vendor/**/*.php)
xdebugSettings: Allows you to override XDebug's remote debugging settings to fine tuning XDebug to your needs. For example, you can play with max_children and max_depth to change the max number of array and object children that are retrieved and the max depth in structures like arrays and objects. This can speed up the debugger on slow machines. For a full list of feature names that can be set please refer to the Xdebug documentation.
max_children: max number of array or object children to initially retrieve
max_data: max amount of variable data to initially retrieve.
max_depth: maximum depth that the debugger engine may return when sending arrays, hashs or object structures to the IDE.
show_hidden: This feature can get set by the IDE if it wants to have more detailed internal information on properties (eg. private members of classes, etc.) Zero means that hidden members are not shown to the IDE.
Options specific to CLI debugging:

program: Path to the script that should be launched
args: Arguments passed to the script
cwd: The current working directory to use when launching the script
runtimeExecutable: Path to the PHP binary used for launching the script. By default the one on the PATH.
runtimeArgs: Additional arguments to pass to the PHP binary
externalConsole: Launches the script in an external console window instead of the debug console (default: false)
env: Environment variables to pass to the script
Features
Line breakpoints
Conditional breakpoints
Function breakpoints
Step over, step in, step out
Break on entry
Breaking on uncaught exceptions and errors / warnings / notices
Multiple, parallel requests
Stack traces, scope variables, superglobals, user defined constants
Arrays & objects (including classname, private and static properties)
Debug console
Watches
Run as CLI
Run without debugging
Remote Host Debugging
To debug a running application on a remote host, you need to tell Xdebug to connect to a different IP than localhost. This can either be done by setting xdebug.remote_host to your IP or by setting xdebug.remote_connect_back = 1 to make Xdebug always connect back to the machine who did the web request. The latter is the only setting that supports multiple users debugging the same server and "just works" for web projects. Again, please see the Xdebug documentation on the subject for more information.

To make VS Code map the files on the server to the right files on your local machine, you have to set the pathMappings settings in your launch.json. Example:

// server -> local
"pathMappings": {
  "/var/www/html": "${workspaceFolder}/www",
  "/app": "${workspaceFolder}/app"
}
Please also note that setting any of the CLI debugging options will not work with remote host debugging, because the script is always launched locally. If you want to debug a CLI script on a remote host, you need to launch it manually from the command line.

Troubleshooting
Ask a question on StackOverflow
If you think you found a bug, open an issue
Make sure you have the latest version of this extension and Xdebug installed
Try out a simple PHP file to recreate the issue, for example from the testproject
In your php.ini, set xdebug.remote_log = /path/to/logfile (make sure your webserver has write permissions to the file)
Set "log": true in your launch.json
Contributing
To hack on this adapter, clone the repository and open it in VS Code. You need NodeJS with NPM installed. Install dependencies by running npm install.

You can debug the extension (run it in "server mode") by selecting the "Debug adapter" launch configuration and hitting F5. Then, open a terminal inside the project, and open the included testproject with VS Code while specifying the current directory as extensionDevelopmentPath:

code testproject --extensionDevelopmentPath=.
VS Code will open an "Extension Development Host" with the debug adapter running. Open .vscode/launch.json and uncomment the debugServer configuration line. Hit F5 to start a debugging session. Now you can debug the testproject like specified above and set breakpoints inside your first VS Code instance to step through the adapter code.

The extension is written in TypeScript. You can compile it through npm run build. npm run watch enables incremental compilation.

Tests are written with Mocha and can be run with npm test. The tests are run in CI on Linux, macOS and Windows against multiple PHP and XDebug versions.